{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai-powered-chatbot\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useState, useContext } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create a custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Provider component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  // Login function - simulated for now\n  const login = async credentials => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // For demo, just check if email and password are provided\n      if (credentials.email && credentials.password) {\n        const userData = {\n          id: '1',\n          name: credentials.email.split('@')[0],\n          email: credentials.email\n        };\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Store in localStorage for persistence\n        localStorage.setItem('user', JSON.stringify(userData));\n        return userData;\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Signup function - simulated for now\n  const signup = async userData => {\n    setLoading(true);\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // For demo, just check if required fields are provided\n      if (userData.name && userData.email && userData.password) {\n        const newUser = {\n          id: '1',\n          name: userData.name,\n          email: userData.email\n        };\n        setUser(newUser);\n        setIsAuthenticated(true);\n\n        // Store in localStorage for persistence\n        localStorage.setItem('user', JSON.stringify(newUser));\n        return newUser;\n      } else {\n        throw new Error('Missing required fields');\n      }\n    } catch (error) {\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('user');\n  };\n\n  // Check if user is already logged in from localStorage\n  const checkAuthStatus = () => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      const parsedUser = JSON.parse(storedUser);\n      setUser(parsedUser);\n      setIsAuthenticated(true);\n    }\n  };\n\n  // Check auth status on initial load\n  React.useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      login,\n      signup,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"auf9tazxwgWNX+XVMplyQsq3chg=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","login","credentials","Promise","resolve","setTimeout","email","password","userData","id","name","split","localStorage","setItem","JSON","stringify","error","signup","newUser","logout","removeItem","checkAuthStatus","storedUser","getItem","parsedUser","parse","useEffect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ai-powered-chatbot/frontend/src/context/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\r\nimport React, { createContext, useState, useContext } from 'react';\r\n\r\n// Create the context\r\nconst AuthContext = createContext();\r\n\r\n// Create a custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Login function - simulated for now\r\n  const login = async (credentials) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // For demo, just check if email and password are provided\r\n      if (credentials.email && credentials.password) {\r\n        const userData = {\r\n          id: '1',\r\n          name: credentials.email.split('@')[0],\r\n          email: credentials.email\r\n        };\r\n        \r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Store in localStorage for persistence\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        return userData;\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Signup function - simulated for now\r\n  const signup = async (userData) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // For demo, just check if required fields are provided\r\n      if (userData.name && userData.email && userData.password) {\r\n        const newUser = {\r\n          id: '1',\r\n          name: userData.name,\r\n          email: userData.email\r\n        };\r\n        \r\n        setUser(newUser);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Store in localStorage for persistence\r\n        localStorage.setItem('user', JSON.stringify(newUser));\r\n        \r\n        return newUser;\r\n      } else {\r\n        throw new Error('Missing required fields');\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  // Check if user is already logged in from localStorage\r\n  const checkAuthStatus = () => {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const parsedUser = JSON.parse(storedUser);\r\n      setUser(parsedUser);\r\n      setIsAuthenticated(true);\r\n    }\r\n  };\r\n\r\n  // Check auth status on initial load\r\n  React.useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      isAuthenticated, \r\n      loading,\r\n      login,\r\n      signup,\r\n      logout\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}