{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai-powered-chatbot\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport chatService from '../services/chatService';\nimport { useAuth } from './AuthContext';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Create custom hook to use the chat context\nexport const useChat = () => {\n  _s();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n\n// Provider component\n_s(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ChatProvider = ({\n  children\n}) => {\n  _s2();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const {\n    isAuthenticated\n  } = useAuth();\n\n  // Load initial messages\n  useEffect(() => {\n    if (isAuthenticated) {\n      loadInitialMessages();\n    }\n  }, [isAuthenticated]);\n\n  // Load conversation history\n  const loadInitialMessages = async () => {\n    setLoading(true);\n    try {\n      const history = await chatService.getConversationHistory();\n      setMessages(history);\n    } catch (error) {\n      console.error('Failed to load messages:', error);\n      // Set a default welcome message if loading fails\n      setMessages([{\n        id: 1,\n        text: \"Hi there! I'm MindfulChat, your mental health companion. How are you feeling today?\",\n        sender: 'bot',\n        timestamp: new Date()\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Send a message and get a response\n  const sendMessage = async text => {\n    if (!text.trim()) return;\n\n    // Add user message to state\n    const userMessage = {\n      id: Date.now(),\n      text,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n\n    // Get bot response\n    setLoading(true);\n    try {\n      const botResponse = await chatService.sendMessage(text);\n      setMessages(prevMessages => [...prevMessages, botResponse]);\n    } catch (error) {\n      console.error('Failed to get response:', error);\n      // Add error message\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"I'm having trouble responding right now. Please try again.\",\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear chat history\n  const clearChat = () => {\n    setMessages([{\n      id: Date.now(),\n      text: \"Hi there! I'm MindfulChat, your mental health companion. How are you feeling today?\",\n      sender: 'bot',\n      timestamp: new Date()\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages,\n      loading,\n      sendMessage,\n      clearChat\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s2(ChatProvider, \"iIsHP3St61GITXLZk1MowvpZzxw=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","chatService","useAuth","jsxDEV","_jsxDEV","ChatContext","useChat","_s","context","Error","ChatProvider","children","_s2","messages","setMessages","loading","setLoading","isAuthenticated","loadInitialMessages","history","getConversationHistory","error","console","id","text","sender","timestamp","Date","sendMessage","trim","userMessage","now","prevMessages","botResponse","errorMessage","isError","clearChat","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ai-powered-chatbot/frontend/src/context/ChatContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport chatService from '../services/chatService';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Create context\r\nconst ChatContext = createContext();\r\n\r\n// Create custom hook to use the chat context\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Provider component\r\nexport const ChatProvider = ({ children }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { isAuthenticated } = useAuth();\r\n\r\n  // Load initial messages\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      loadInitialMessages();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // Load conversation history\r\n  const loadInitialMessages = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const history = await chatService.getConversationHistory();\r\n      setMessages(history);\r\n    } catch (error) {\r\n      console.error('Failed to load messages:', error);\r\n      // Set a default welcome message if loading fails\r\n      setMessages([\r\n        {\r\n          id: 1,\r\n          text: \"Hi there! I'm MindfulChat, your mental health companion. How are you feeling today?\",\r\n          sender: 'bot',\r\n          timestamp: new Date()\r\n        }\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Send a message and get a response\r\n  const sendMessage = async (text) => {\r\n    if (!text.trim()) return;\r\n    \r\n    // Add user message to state\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      text,\r\n      sender: 'user',\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    \r\n    // Get bot response\r\n    setLoading(true);\r\n    try {\r\n      const botResponse = await chatService.sendMessage(text);\r\n      setMessages(prevMessages => [...prevMessages, botResponse]);\r\n    } catch (error) {\r\n      console.error('Failed to get response:', error);\r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now() + 1,\r\n        text: \"I'm having trouble responding right now. Please try again.\",\r\n        sender: 'bot',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Clear chat history\r\n  const clearChat = () => {\r\n    setMessages([\r\n      {\r\n        id: Date.now(),\r\n        text: \"Hi there! I'm MindfulChat, your mental health companion. How are you feeling today?\",\r\n        sender: 'bot',\r\n        timestamp: new Date()\r\n      }\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={{\r\n      messages,\r\n      loading,\r\n      sendMessage,\r\n      clearChat\r\n    }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}